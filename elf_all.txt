根据文件头、seg_headers、sec_headers分析出整体文件结构

--------------  0x00    -----------------------------
     |                  |       elf_header          |
     |          0x40    -----------------------------
  program 00            |     seg_header x 3        |
     |          0xE8    -----------------------------
     |                  |       [3].text            |
     |          0x13B   -----------------------------
     |                  |       [4].rodata          |
     |          0x148   -----------------------------
     |                  |       [5].eh_fram         |
--------------  0x1c0   -----------------------------
  program 01            |   [6].got.plt/[7].data    |
--------------  0x1c8   -----------------------------
                        |       [8].comment         |
                0x1f5   -----------------------------
                        |       [9].shstrtab        |
                0x24A   -----------------------------
                        |       0x00 x 6            |
                0x250   -----------------------------
                        |     sec_header x 12       |
                0x550   -----------------------------
                        |       [10].symtab         |
                0x6e8   -----------------------------
                        |       [11].strtab         |
                0x721   -----------------------------


=========================================================================
下面是seg_headers

Entry point 0x400121
There are 3 program headers, starting at offset 64
Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                 0x00000000000001c0 0x00000000000001c0  R E    200000
  LOAD           0x00000000000001c0 0x00000000006001c0 0x00000000006001c0
                 0x0000000000000008 0x0000000000000008  RW     200000
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     8

 Section to Segment mapping:
  Segment Sections...
   00     .rela.plt .plt .text .rodata .eh_frame 
   01     .got.plt .data 
   02
=========================================================================
下面是sec_headers

There are 12 section headers, starting at offset 0x250:
Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .rela.plt         RELA             00000000004000e8  000000e8
       0000000000000000  0000000000000018   A       0     2     8
  [ 2] .plt              PROGBITS         00000000004000e8  000000e8
       0000000000000000  0000000000000000  AX       0     0     4
  [ 3] .text             PROGBITS         00000000004000e8  000000e8
       0000000000000053  0000000000000000  AX       0     0     4
  [ 4] .rodata           PROGBITS         000000000040013b  0000013b
       000000000000000d  0000000000000000   A       0     0     1
  [ 5] .eh_frame         PROGBITS         0000000000400148  00000148
       0000000000000078  0000000000000000   A       0     0     8
  [ 6] .got.plt          PROGBITS         00000000006001c0  000001c0
       0000000000000000  0000000000000000  WA       0     0     8
  [ 7] .data             PROGBITS         00000000006001c0  000001c0
       0000000000000008  0000000000000000  WA       0     0     8
  [ 8] .comment          PROGBITS         0000000000000000  000001c8
       000000000000002d  0000000000000001  MS       0     0     1
  [ 9] .shstrtab         STRTAB           0000000000000000  000001f5
       0000000000000055  0000000000000000           0     0     1
  [10] .symtab           SYMTAB           0000000000000000  00000550
       0000000000000198  0000000000000018          11    10     8
  [11] .strtab           STRTAB           0000000000000000  000006e8
       0000000000000039  0000000000000000           0     0     1
=========================================================================
进行反汇编，segment[00]的加载地址是0x400000，文件头、seg_headers以及代码段
都被加载的内存中，代码段的加载地址是0x4000e8，该地址是m_print函数的入口地
址，main函数的入口地址是0x400121，该地址也是文件头中指定的程序入口地址

(gdb) disassemble 0x4000e8
Dump of assembler code for function m_print:
   0x00000000004000e8 <+0>: push   %rbp
   0x00000000004000e9 <+1>: mov    %rsp,%rbp
   0x00000000004000ec <+4>: push   %rbx
   0x00000000004000ed <+5>: mov    0x2000cc(%rip),%rbx        # 0x6001c0 <str>
   0x00000000004000f4 <+12>:    mov    $0x1,%eax
   0x00000000004000f9 <+17>:    mov    $0x0,%ecx
   0x00000000004000fe <+22>:    mov    $0xc,%edx
   0x0000000000400103 <+27>:    mov    %ecx,%edi
   0x0000000000400105 <+29>:    mov    %rbx,%rsi
   0x0000000000400108 <+32>:    syscall 
   0x000000000040010a <+34>:    pop    %rbx
   0x000000000040010b <+35>:    leaveq 
   0x000000000040010c <+36>:    retq   
End of assembler dump.
(gdb) disassemble m_exit
Dump of assembler code for function m_exit:
   0x000000000040010d <+0>: push   %rbp
   0x000000000040010e <+1>: mov    %rsp,%rbp
   0x0000000000400111 <+4>: mov    $0x3c,%eax
   0x0000000000400116 <+9>: mov    $0x17,%edx
   0x000000000040011b <+14>:    mov    %edx,%edi
   0x000000000040011d <+16>:    syscall 
   0x000000000040011f <+18>:    leaveq 
   0x0000000000400120 <+19>:    retq   
End of assembler dump.
(gdb) disassemble main
Dump of assembler code for function main:
   0x0000000000400121 <+0>: push   %rbp
   0x0000000000400122 <+1>: mov    %rsp,%rbp
=> 0x0000000000400125 <+4>: mov    $0x0,%eax
   0x000000000040012a <+9>: callq  0x4000e8 <m_print>
   0x000000000040012f <+14>:    mov    $0x0,%eax
   0x0000000000400134 <+19>:    callq  0x40010d <m_exit>
   0x0000000000400139 <+24>:    leaveq 
   0x000000000040013a <+25>:    retq   
End of assembler dump.
